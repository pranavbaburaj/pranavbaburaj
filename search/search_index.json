{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Polyglot Polyglot The polyglot.core.Polyglot is the main class of polyglot the polyglot module. from polyglot.core import Polyglot Initialize a polyglot instance polyglot = Polyglot(\"path/to/directory\", ignore=[\"language.yml\"]) Polyglot takes in to parameters, the path to the directory and the ingore file directory_name( required ) - string The path of the directory ignore - The ignore filename The ignore file should have a .polyglot file extension and has a syntax similar to a .gitignore file. .<extension> for file extensions <folder>/ for folders <filename> for files # for a specific file extension .json # for a specific folder dist/ # for a specific file dub.sdl LICENSE # for specific folders in the directory ~.tox and use the file with the polyglot object python poly = Polyglot(\".\", \"example.polyglot\") Getting information from the polyglot object polyglot.show(language_detection_file=\"language.yml\", display=True) The show method takes in two parameters, the language detection file as well as the disply option language_detection_file( optional ) - string The yaml file containing information about all the languages. By default, the language_detection_file is set to None . and the file is downloaded from the internet. display( optional ) - bool Whether to output the table on the console or not. The show method returns a dict containing information about the files. Arguments The polyglot.arguments.Arguments helps you parse a set of arguments and execute functions accordingly. from polyglot.arugments import Arguments passing in arguments args = Arguments(arguments=[], return_value=False) args.parse() arguments( optional ) - list The set of arguments. By default, the arguments in set to sys.argv[1:] . return_value( optional ) - bool Whether to return anything or not","title":"Home"},{"location":"#polyglot","text":"","title":"Polyglot"},{"location":"#polyglot_1","text":"The polyglot.core.Polyglot is the main class of polyglot the polyglot module. from polyglot.core import Polyglot Initialize a polyglot instance polyglot = Polyglot(\"path/to/directory\", ignore=[\"language.yml\"]) Polyglot takes in to parameters, the path to the directory and the ingore file directory_name( required ) - string The path of the directory ignore - The ignore filename The ignore file should have a .polyglot file extension and has a syntax similar to a .gitignore file. .<extension> for file extensions <folder>/ for folders <filename> for files # for a specific file extension .json # for a specific folder dist/ # for a specific file dub.sdl LICENSE # for specific folders in the directory ~.tox and use the file with the polyglot object python poly = Polyglot(\".\", \"example.polyglot\") Getting information from the polyglot object polyglot.show(language_detection_file=\"language.yml\", display=True) The show method takes in two parameters, the language detection file as well as the disply option language_detection_file( optional ) - string The yaml file containing information about all the languages. By default, the language_detection_file is set to None . and the file is downloaded from the internet. display( optional ) - bool Whether to output the table on the console or not. The show method returns a dict containing information about the files.","title":"Polyglot"},{"location":"#arguments","text":"The polyglot.arguments.Arguments helps you parse a set of arguments and execute functions accordingly. from polyglot.arugments import Arguments passing in arguments args = Arguments(arguments=[], return_value=False) args.parse() arguments( optional ) - list The set of arguments. By default, the arguments in set to sys.argv[1:] . return_value( optional ) - bool Whether to return anything or not","title":"Arguments"},{"location":"blog/","text":"I've recently been working on a side project called polyglot . Polyglot is a python module that finds the percentage of different programming languages used in your project. {% github pranavbaburaj/polyglot no-readme %} You can check it out on Github and also drop a star. Get Started In order to get started, you will need to have python and pip installed on your system. Check the versions of python and pip python -v pip -v Install python-polyglot using pip To install python-polyglot in your system, use pip install python-polyglot How to use it Once Polyglot is all set up and good to go, implementing is easy as pie. from polyglot.core import Polyglot # dot(.) represents the current working directory dirname = \".\" or \"path/to/dir\" poly = Polyglot(\".\") poly.show() This prints out something similar +-------------------------+-------+ | Language | files | +-------------------------+-------+ | Ignore List | 5.88 | | GCC Machine Description | 11.76 | | Unknown | 5.88 | | Text | 5.88 | | Python | 64.71 | | JSON | 5.88 | +-------------------------+-------+ +-------------------------+-------+ | Language | lines | +-------------------------+-------+ | Ignore List | 17.22 | | GCC Machine Description | 22.24 | | Unknown | 2.83 | | Text | 0.26 | | Python | 57.07 | | JSON | 0.39 | +-------------------------+-------+ Ignores The ignore option is used to ignore specific files in the directory tree. For instance, if you don't want the JSON files to appear in the table, you can add the .json extension to a polyglot-ignore file and pass it as a parameter while creating the polyglot instance. Polyglot Ignores Polyglot ignores are used to ignore specific files in the directory tree. They should have a .polyglot file extension. Polyglot Ignores as similar to gitignores and are easy to write with almost the same syntax. Writing a Polyglot ignore. Create a test.polyglot file and add the files to ignore # for a specific file extension .json # for a specific folder dist/ # for a specific file dub.sdl LICENSE # for specific folders in the directory ~.tox Once you have an ignore file, use it with polyglot like this poly = Polyglot(dirname, ignore=\"test.polyglot\") Arguments from polyglot.arugments import Arguments The Polyglot Arguments is used to parse a list of arguments( sys.argv[1:] by default) and perform actions related to Polyglot. You can either pass in arguments manually args = Arguments(arguments=[ \"--show=True\", \"--dir=.\", \"--o=out.json\", \"--ignore=test.polyglot\" ], return_value=False) or leave it blank to parse the command line arguments passed in along with the file args = Arguments() Start the argument parser args.parse() The command-line parser has four main options, --dir (default: current directory ) - The directory path --show (default: True ) - Whether to display the table or not --o (default: None ) - Outputs the data as JSON in the file --ignore (default: None ) - The ignore file An example usage ] python -B <filename>.py --dir=. --show=False Please star the project on GitHub if you like it. And thank you for scrolling.","title":"Blog"},{"location":"blog/#get-started","text":"In order to get started, you will need to have python and pip installed on your system. Check the versions of python and pip python -v pip -v Install python-polyglot using pip To install python-polyglot in your system, use pip install python-polyglot","title":"Get Started"},{"location":"blog/#how-to-use-it","text":"Once Polyglot is all set up and good to go, implementing is easy as pie. from polyglot.core import Polyglot # dot(.) represents the current working directory dirname = \".\" or \"path/to/dir\" poly = Polyglot(\".\") poly.show() This prints out something similar +-------------------------+-------+ | Language | files | +-------------------------+-------+ | Ignore List | 5.88 | | GCC Machine Description | 11.76 | | Unknown | 5.88 | | Text | 5.88 | | Python | 64.71 | | JSON | 5.88 | +-------------------------+-------+ +-------------------------+-------+ | Language | lines | +-------------------------+-------+ | Ignore List | 17.22 | | GCC Machine Description | 22.24 | | Unknown | 2.83 | | Text | 0.26 | | Python | 57.07 | | JSON | 0.39 | +-------------------------+-------+","title":"How to use it"},{"location":"blog/#ignores","text":"The ignore option is used to ignore specific files in the directory tree. For instance, if you don't want the JSON files to appear in the table, you can add the .json extension to a polyglot-ignore file and pass it as a parameter while creating the polyglot instance. Polyglot Ignores Polyglot ignores are used to ignore specific files in the directory tree. They should have a .polyglot file extension. Polyglot Ignores as similar to gitignores and are easy to write with almost the same syntax. Writing a Polyglot ignore. Create a test.polyglot file and add the files to ignore # for a specific file extension .json # for a specific folder dist/ # for a specific file dub.sdl LICENSE # for specific folders in the directory ~.tox Once you have an ignore file, use it with polyglot like this poly = Polyglot(dirname, ignore=\"test.polyglot\")","title":"Ignores"},{"location":"blog/#arguments","text":"from polyglot.arugments import Arguments The Polyglot Arguments is used to parse a list of arguments( sys.argv[1:] by default) and perform actions related to Polyglot. You can either pass in arguments manually args = Arguments(arguments=[ \"--show=True\", \"--dir=.\", \"--o=out.json\", \"--ignore=test.polyglot\" ], return_value=False) or leave it blank to parse the command line arguments passed in along with the file args = Arguments() Start the argument parser args.parse() The command-line parser has four main options, --dir (default: current directory ) - The directory path --show (default: True ) - Whether to display the table or not --o (default: None ) - Outputs the data as JSON in the file --ignore (default: None ) - The ignore file An example usage ] python -B <filename>.py --dir=. --show=False Please star the project on GitHub if you like it. And thank you for scrolling.","title":"Arguments"}]}